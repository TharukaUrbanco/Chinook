@inject IPlayListService PlayListService;

<div class="mt-2">
    <hr style="color:white"/>
    <div class="input-group justify-content-between">
        <h5 style="color:white;font-size:16px;">
            My PlayLists          
        </h5>
        <button class="btn btn btn-outline-light" @onclick="OpenAddNewPlaylistDialog"><i class="bi bi-plus">Add</i></button>
    </div>
    
    <br />
    @if (playLists == null)
    {
        <Loading/>
    }
    else
    {
        @if(playLists.Count > 0)
        {
            <ul class="list-group list-group-flush">
                @foreach (var i in playLists)
                {
                    <li class="list-group-item">@i.Name</li>
                }
            </ul>
        }
        else
        {
            <br />
            <p>List is Empty...</p>
        }
    }
    <hr style="color:white" />

</div>

<style>

    .modal {
        top: 5%;
        z-index: 100000
    }

</style>

<Modal @ref="AddNewPlayListDialog">
    <Title>
        Add New Playlist
    </Title>
    <Body>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddNewPlayList">Save</button>
    </Footer>
</Modal>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string InfoMessage = string.Empty;

    private string CurrentUserId = string.Empty;

    private List<Models.Playlist> playLists = new List<Models.Playlist>();

    private Modal AddNewPlayListDialog { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        CurrentUserId = await GetUserId();
        playLists = (await PlayListService.GetPlayListsByUserIdAsync(CurrentUserId)).ToList();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

  

    private void AddNewPlayList()
    {
        //CloseInfoMessage();
        //InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        AddNewPlayListDialog.Close();
    }

    private void OpenAddNewPlaylistDialog()
    {
        CloseInfoMessage();
        AddNewPlayListDialog.Open();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}

