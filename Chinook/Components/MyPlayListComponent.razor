@inject IPlayListService PlayListService;
@inject NavigationManager NavigationManager

<div class="mt-2">
    <hr style="color:white"/>
    <div class="input-group justify-content-between">
        <h5 style="color:white;font-size:18px;">
            My PlayLists          
        </h5>
        <button class="btn btn btn-outline-light" @onclick="OpenAddNewPlaylist"><i class="bi bi-plus">Add</i></button>
    </div>
    
    <br />
    @if (playLists == null)
    {
        <Loading/>
    }
    else
    {
        <div style="overflow-y: scroll;max-height:300px">

        @if(playLists.Count > 0)
        {
            <ul class="list-group list-group-flush">
                @foreach (var i in playLists)
                {
                    <li class="list-group-item">@i.Name</li>
                }
            </ul>
        }
        else
        {
            <br />
            <p>List is Empty...</p>
        }
        </div>
    }
    <hr style="color:white" />

</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string CurrentUserId = string.Empty;

    private List<Models.Playlist> playLists = new List<Models.Playlist>();

    protected override async Task OnParametersSetAsync()
    {
        CurrentUserId = await GetUserId();
        playLists = (await PlayListService.GetPlayListsByUserIdAsync(CurrentUserId)).ToList();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void OpenAddNewPlaylist()
    {
        NavigationManager.NavigateTo("/addPlayList");
    }

}

